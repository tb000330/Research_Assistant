{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"GDP_fn_사용중","provenance":[],"collapsed_sections":[],"toc_visible":true,"mount_file_id":"1Ud9RNZwmpoVi1qreTugM8VUYVikB_Qbk","authorship_tag":"ABX9TyMcFRYGS2gV3W6Ey0xMYn0Z"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JUMI-gOLUhUI","executionInfo":{"status":"ok","timestamp":1653543134168,"user_tz":-540,"elapsed":1975,"user":{"displayName":"김다은","userId":"16190703000834159129"}},"outputId":"ae5305f4-9bee-4a0d-eeef-8bff1ceab7e9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["import numpy as np #대수학\n","import pandas as pd #전처리\n","\n","import seaborn as sns #시각화\n","from matplotlib.patches import Patch\n","from matplotlib import pyplot as plt\n","\n","plt.rcParams.update({'figure.max_open_warning': 0})\n","plt.style.use('fivethirtyeight')\n","cmap_data = plt.cm.Paired\n","cmap_cv = plt.cm.coolwarm\n","\n","import warnings\n","%matplotlib inline\n","\n","import configparser\n","\n","import re\n","import time\n","from tqdm import tqdm\n","import warnings\n","warnings.filterwarnings('ignore')\n","\n","import datetime as dt\n","\n","import os # 경로\n","\n","import numpy as np\n","import sys\n","import random \n","import tensorflow as tf\n","from tensorflow import keras\n","from tensorflow.keras.layers import SimpleRNN, LSTM, Bidirectional\n","\n","import configparser\n","from keras.models import Sequential\n","from keras.layers import Dense, Embedding\n","from keras.layers import SimpleRNN\n","from keras.layers import Dropout\n","from tensorflow.python.keras.callbacks import EarlyStopping, ModelCheckpoint, LearningRateScheduler"],"metadata":{"id":"I9bjh3Yp-HZr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class GDP(): \n","  def __init__(self):\n","    self.config = configparser.ConfigParser()\n","    self.config.read(\"/content/drive/MyDrive/Colab Notebooks/gdp_re/config/config.ini\", encoding=\"utf-8\")\n","    \n","    ## training_data_n\n","    # self.data_path = self.config['data_path']['training_data_0']\n","    # self.data_path = self.config['data_path']['training_data_forecasted_1']\n","    # self.filter_path = self.config['columns']['filter_col']\n","\n","    ## 원데이터\n","    self.data_path = self.config['data_path']['training_data_0524']    \n","    self.filter_path = self.config['columns']['filter_col_raw']\n","    \n","    ## new_training_data\n","    # self.data_path = self.config['data_path']['new_training_data']\n","    # self.filter_path = self.config['columns']['filter_col_new']    \n","    \n","    self.data = pd.read_csv(self.data_path)\n","    self.filter_path = self.filter_path.split(',')\n","\n","  \n","  def preprocesscing(self, data):\n","    super(GDP).__init__() \n","    data = data[data.iloc[:, 9:].apply(lambda row : sum(pd.isna(row)), axis = 1) == 0]\n","    data = data.reset_index(drop = True)\n","\n","    ## 시간 타입으로 변환\n","    data['TIME'] = data['TIME'].astype(str)\n","\n","    time_list = []\n","    for i in range(len(data)):\n","      time_i = data['TIME'][i]\n","      time = re.sub(r'(\\d{4})(\\d{2})', '\\g<1>-\\g<2>', time_i) #정규표현식 'YYYY-mm'\n","      time_list.append(time)\n","      \n","    data['TIME'] = time_list\n","    data['datetime'] = pd.to_datetime(data['TIME'],  format=\"%Y-%m\") #datetime변환\n","    data.sort_values('datetime', ignore_index = True, inplace = True)\n","\n","    ##정규화\n","    # data['ride_passen_log'] = np.log1p(data['ride_passen'])\n","    # data['takeoff_passen_log'] = np.log1p(data['takeoff_passen'])\n","    # data.head(13)\n","\n","    # ## 표준화\n","    # from sklearn.preprocessing import StandardScaler\n","    # data_scale = data.drop(['MONTH', 'YEAR', 'QRT', 'TIME', 'STATE', 'Y1',\t'Y2',\t'Y3',\t'YY1',\t'YY2',\t'YY3', 'datetime'], axis=1)\n","    # data_scale = StandardScaler().fit_transform(data_scale)\n","\n","    X = data.drop(self.filter_path, axis=1)\n","    y = data['Y']\n","\n","    ## 교차검증 시 데이터 분할 시각화 helper function 가져오기\n","    from sklearn.model_selection import TimeSeriesSplit \n","    from matplotlib.patches import Patch \n","    import matplotlib.pyplot as plt \n","\n","    n_split = 5\n","    tscv = TimeSeriesSplit(n_splits=n_split)\n","    X = X.set_index(data[\"datetime\"])\n","\n","    for fold, (train_index, test_index) in enumerate(tscv.split(X)):\n","      print(\"Fold: {}\".format(fold))\n","      print(\"TRAIN indices:\", train_index, \"\\n\", \"TEST indices:\", test_index)\n","      print(\"\\n\")\n","      X_train, X_test = X.iloc[train_index], X.iloc[test_index]\n","      y_train, y_test = y.iloc[train_index], y[test_index]\n","    \n","    return X_train, X_test, y_train, y_test\n","\n","\n","  def Model(self, input_dim, units, epochs, batch_size, patience, dropout, lr):\n","    self.input_dim = input_dim\n","    self.units = units\n","    self.epochs = epochs\n","    self.batch_size = batch_size\n","    self.patience = patience\n","    self.dropout = dropout\n","    self.lr = lr\n","    \n","    def seed_everthing(seed):\n","      random.seed(seed)\n","      np.random.seed(seed)\n","      os.environ[\"PYTHONHASHSEED\"] = str(seed)\n","      tf.random.set_seed(seed)\n","\n","    ## 순차적 RNN모델 구현하기 - 방법 1\n","    ## .add(RNN모델(하이퍼파라미터))으로 선언\n","\n","    ## [1] 순차적 모델 선언\n","    model = Sequential()\n","    seed_everthing(1)\n","\n","    ## [2] 입력층, 은닉층, 출력층 추가: .add(SimpleRNN(하이퍼파라미터))\n","    ## 입력층 추가\n","    # model.add(keras.Input(shape=(X_train.shape[1],1)))\n","    # model.add(Dense(self.units, activation='tanh')\n","    # model.layers.Embedding(67, 48, input_length = 1)\n","    # model.add(layers.Embedding(input_dim = 67, output_dim = 1))\n","    model.add(Embedding(input_dim =self.input_dim, output_dim = 1))\n","\n","    # RNN 첫번째 은닉층 추가\n","    model.add(SimpleRNN(units=self.input_dim, activation='tanh', return_sequences = True))\n","    model.add(Dropout(0.6)) # 노드간의 커넥트를 랜덤하게 끊어줌\n","\n","    # RNN 두번째 은닉층 추가\n","    model.add(SimpleRNN(int(self.units/2), activation='tanh', return_sequences = True)) # True : many to many, 혹은 여러 RNN / LSTM 층을 쌓을때 사용, False = many to one, Dense 층으로 넘겨줄때\n","    model.add(Dropout(0.5))\n","\n","    # RNN 세번째 은닉층 추가\n","    model.add(SimpleRNN(int(self.units/3), activation='tanh', return_sequences = True)) # True : many to many, 혹은 여러 RNN / LSTM 층을 쌓을때 사용, False = many to one, Dense 층으로 넘겨줄때\n","    model.add(Dropout(0.3))\n","\n","    # # RNN 네번째 은닉층 추가\n","    # model.add(SimpleRNN(int(self.units/4), activation='tanh', return_sequences = True)) # True : many to many, 혹은 여러 RNN / LSTM 층을 쌓을때 사용, False = many to one, Dense 층으로 넘겨줄때\n","    # model.add(Dropout(0.3))\n","\n","    model.add(SimpleRNN(10, activation='tanh', return_sequences = False)) # True : many to many, 혹은 여러 RNN / LSTM 층을 쌓을때 사용, False = many to one, Dense 층으로 넘겨줄때\n","    model.add(Dropout(0.3))\n","\n","    # # RNN 세번째 은닉층 추가\n","    # # model.add(SimpleRNN(self.units, activation='tanh', return_sequences=True))\n","    # model.add(Dense(units = self.units / 4, activation=\"ReLU\"))\n","    # # model.add(SimpleRNN(units = 10, activation='tanh', return_sequences=True))\n","    # model.add(Dropout(0.2))\n","\n","    # 출력층 추가: 분류모델 제외하고 활성화함수 사용X\n","    model.add(Dense(units = 1)) # 다대일\n","\n","    ## [3] compile: RNN모델을 학습시키기 위한 학습과정 설정하는 단계\n","    model.compile(optimizer='adam', loss='mean_squared_error', metrics=[tf.keras.metrics.RootMeanSquaredError()])\n","\n","    ## [4] 학습데이터로 RNN모델 학습\n","    # earlystopping 선언\n","    save_folder = '/content/drive/MyDrive/Colab Notebooks/교수님/hdf5/'\n","    model_path = save_folder + 'mnist-' + '{epoch:02d}-{val_loss:.4f}.hdf5'\n","\n","    checkpoint = ModelCheckpoint(filepath=model_path, monitor='val_loss', save_best_only=True)\n","    early_stopping = EarlyStopping(monitor='val_loss', patience =self.patience, mode='min')\n","\n","    initial_learning_rate = self.lr\n","    lr_schedule = tf.keras.optimizers.schedules.ExponentialDecay(initial_learning_rate, decay_steps = 100, decay_rate = 0.96, staircase=True)\n","    scheduler = keras.callbacks.LearningRateScheduler(lr_schedule, verbose=1)\n","\n","    hist = model.fit(X_train, y_train, validation_data =(X_test, y_test), epochs=self.epochs,  batch_size =self.batch_size ,callbacks=[checkpoint, early_stopping, scheduler])\n","    \n","    return hist, model\n","\n","  # def graph(self):\n","  #   y_vloss = hist.history['loss']\n","  #   y_loss = hist.history['val_loss']\n","\n","  #   x_len = np.arange(len(y_loss))\n","  #   plt.plot(x_len, y_vloss, marker='.', c='red', label=\"Validation-set Loss\")\n","  #   plt.plot(x_len, y_loss, marker='.', c='blue', label=\"Train-set Loss\")\n","\n","  #   plt.legend(loc='upper right')\n","  #   plt.grid()\n","  #   plt.xlabel('epoch')\n","  #   plt.ylabel('loss')\n","  #   plt.show()\n"],"metadata":{"id":"ip3wb18hQT1j"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## 코로나 미포함"],"metadata":{"id":"PsXqPYsV8Tol"}},{"cell_type":"code","source":["func = GDP()"],"metadata":{"id":"QDOql4Fnkzfn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data = pd.read_csv(func.data_path)\n","data = data[(data['YEAR']!=2020)&(data['YEAR']!=2021)]\n","data.tail(3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":286},"id":"-20H6DyyBA0L","executionInfo":{"status":"ok","timestamp":1653543239539,"user_tz":-540,"elapsed":10,"user":{"displayName":"김다은","userId":"16190703000834159129"}},"outputId":"0b703e75-e189-4f33-bd60-f3b90e62bff6"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    Unnamed: 0    Y   Y1   Y2   Y3             YY1                    YY2  \\\n","69         230  1.0  0.4  1.3 -1.3     ['1' '0.4']      ['1' '0.4' '1.3']   \n","70         233  0.4  1.3 -1.3 -3.2   ['0.4' '1.3']   ['0.4' '1.3' '-1.3']   \n","71         236  1.3 -1.3 -3.2  2.2  ['1.3' '-1.3']  ['1.3' '-1.3' '-3.2']   \n","\n","                            YY3  MONTH  YEAR  ...   X16_L0   X16_L1   X16_L2  \\\n","69     ['1' '0.4' '1.3' '-1.3']      4  2019  ...  2203.59  2140.67  2195.44   \n","70  ['0.4' '1.3' '-1.3' '-3.2']      7  2019  ...  2024.55  2130.62  2041.74   \n","71  ['1.3' '-1.3' '-3.2' '2.2']     10  2019  ...  2083.48  2063.05  1967.79   \n","\n","     X16_L3  X17_L1  X17_L2  X17_L3  X18_L1  X18_L2  X18_L3  \n","69  2204.85  110.99   94.28  109.59  115.56  102.35  125.64  \n","70  2203.59  103.47  109.61  113.46  111.42  120.29  124.43  \n","71  2024.55  105.63  104.19  110.02  107.56  116.96  120.63  \n","\n","[3 rows x 61 columns]"],"text/html":["\n","  <div id=\"df-e24724e9-5637-473c-a547-bae5081403c3\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>Y</th>\n","      <th>Y1</th>\n","      <th>Y2</th>\n","      <th>Y3</th>\n","      <th>YY1</th>\n","      <th>YY2</th>\n","      <th>YY3</th>\n","      <th>MONTH</th>\n","      <th>YEAR</th>\n","      <th>...</th>\n","      <th>X16_L0</th>\n","      <th>X16_L1</th>\n","      <th>X16_L2</th>\n","      <th>X16_L3</th>\n","      <th>X17_L1</th>\n","      <th>X17_L2</th>\n","      <th>X17_L3</th>\n","      <th>X18_L1</th>\n","      <th>X18_L2</th>\n","      <th>X18_L3</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>69</th>\n","      <td>230</td>\n","      <td>1.0</td>\n","      <td>0.4</td>\n","      <td>1.3</td>\n","      <td>-1.3</td>\n","      <td>['1' '0.4']</td>\n","      <td>['1' '0.4' '1.3']</td>\n","      <td>['1' '0.4' '1.3' '-1.3']</td>\n","      <td>4</td>\n","      <td>2019</td>\n","      <td>...</td>\n","      <td>2203.59</td>\n","      <td>2140.67</td>\n","      <td>2195.44</td>\n","      <td>2204.85</td>\n","      <td>110.99</td>\n","      <td>94.28</td>\n","      <td>109.59</td>\n","      <td>115.56</td>\n","      <td>102.35</td>\n","      <td>125.64</td>\n","    </tr>\n","    <tr>\n","      <th>70</th>\n","      <td>233</td>\n","      <td>0.4</td>\n","      <td>1.3</td>\n","      <td>-1.3</td>\n","      <td>-3.2</td>\n","      <td>['0.4' '1.3']</td>\n","      <td>['0.4' '1.3' '-1.3']</td>\n","      <td>['0.4' '1.3' '-1.3' '-3.2']</td>\n","      <td>7</td>\n","      <td>2019</td>\n","      <td>...</td>\n","      <td>2024.55</td>\n","      <td>2130.62</td>\n","      <td>2041.74</td>\n","      <td>2203.59</td>\n","      <td>103.47</td>\n","      <td>109.61</td>\n","      <td>113.46</td>\n","      <td>111.42</td>\n","      <td>120.29</td>\n","      <td>124.43</td>\n","    </tr>\n","    <tr>\n","      <th>71</th>\n","      <td>236</td>\n","      <td>1.3</td>\n","      <td>-1.3</td>\n","      <td>-3.2</td>\n","      <td>2.2</td>\n","      <td>['1.3' '-1.3']</td>\n","      <td>['1.3' '-1.3' '-3.2']</td>\n","      <td>['1.3' '-1.3' '-3.2' '2.2']</td>\n","      <td>10</td>\n","      <td>2019</td>\n","      <td>...</td>\n","      <td>2083.48</td>\n","      <td>2063.05</td>\n","      <td>1967.79</td>\n","      <td>2024.55</td>\n","      <td>105.63</td>\n","      <td>104.19</td>\n","      <td>110.02</td>\n","      <td>107.56</td>\n","      <td>116.96</td>\n","      <td>120.63</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3 rows × 61 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e24724e9-5637-473c-a547-bae5081403c3')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-e24724e9-5637-473c-a547-bae5081403c3 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-e24724e9-5637-473c-a547-bae5081403c3');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":26}]},{"cell_type":"code","source":["X_train, X_test, y_train, y_test = func.preprocesscing(data = func.data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"y-Y3JJiHk2Nq","executionInfo":{"status":"ok","timestamp":1653543239540,"user_tz":-540,"elapsed":8,"user":{"displayName":"김다은","userId":"16190703000834159129"}},"outputId":"d7164b79-9efe-4283-8bdd-24a4310db66a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Fold: 0\n","TRAIN indices: [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16] \n"," TEST indices: [17 18 19 20 21 22 23 24 25 26 27 28]\n","\n","\n","Fold: 1\n","TRAIN indices: [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n"," 24 25 26 27 28] \n"," TEST indices: [29 30 31 32 33 34 35 36 37 38 39 40]\n","\n","\n","Fold: 2\n","TRAIN indices: [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n"," 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40] \n"," TEST indices: [41 42 43 44 45 46 47 48 49 50 51 52]\n","\n","\n","Fold: 3\n","TRAIN indices: [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n"," 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47\n"," 48 49 50 51 52] \n"," TEST indices: [53 54 55 56 57 58 59 60 61 62 63 64]\n","\n","\n","Fold: 4\n","TRAIN indices: [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n"," 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47\n"," 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64] \n"," TEST indices: [65 66 67 68 69 70 71 72 73 74 75 76]\n","\n","\n"]}]},{"cell_type":"code","source":["X_train = X_train.drop(['Unnamed: 0'], axis=1)\n","X_train"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":673},"id":"xaeaGcu6mGlS","executionInfo":{"status":"ok","timestamp":1653543240110,"user_tz":-540,"elapsed":575,"user":{"displayName":"김다은","userId":"16190703000834159129"}},"outputId":"05916776-680c-4a78-dd07-a197db832151"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["            X1_L2  X1_L3  X2_L2  X2_L3  X3_L2  X3_L3  X4_L2  X4_L3  X5_L2  \\\n","datetime                                                                    \n","2002-01-01   97.9   96.7  100.1   99.8   64.4   62.0   74.0   74.9   68.5   \n","2002-04-01  102.5  101.2  100.6  100.1   58.1   62.6   76.8   75.8   65.5   \n","2002-07-01  104.0  104.3  101.5  101.7   67.5   66.4   78.4   79.6   72.3   \n","2002-10-01  101.8  102.3  101.0  101.1   64.4   66.4   79.9   78.4   68.5   \n","2003-01-01  100.3  100.4  101.5  101.3   69.0   68.7   77.4   78.0   73.0   \n","...           ...    ...    ...    ...    ...    ...    ...    ...    ...   \n","2017-01-01   99.9   99.8  100.9  100.6  106.3  104.3   74.6   71.2  109.1   \n","2017-04-01  100.5  100.3  101.6  101.6   98.5   99.4   73.2   76.3   95.2   \n","2017-07-01  100.7  100.7  102.1  101.9  105.3  104.3   73.8   73.4  107.6   \n","2017-10-01  101.1  100.9  102.1  102.1  103.4  104.5   73.7   73.2  101.3   \n","2018-01-01  100.9  101.0  102.1  102.1  108.4  101.9   73.1   74.2  115.0   \n","\n","            X5_L3  ...   X16_L0   X16_L1   X16_L2   X16_L3  X17_L1  X17_L2  \\\n","datetime           ...                                                       \n","2002-01-01   65.9  ...   748.07   693.70   643.89   537.81   27.06   29.21   \n","2002-04-01   67.3  ...   842.34   895.58   819.99   748.07   30.73   25.15   \n","2002-07-01   71.6  ...   717.99   742.72   796.40   842.34   29.65   32.05   \n","2002-10-01   69.9  ...   658.92   646.42   736.40   717.99   31.89   32.29   \n","2003-01-01   73.2  ...   591.86   627.55   724.80   658.92   33.45   34.74   \n","...           ...  ...      ...      ...      ...      ...     ...     ...   \n","2017-01-01  108.4  ...  2067.57  2026.46  1983.48  2008.19  106.11  102.92   \n","2017-04-01  103.3  ...  2205.44  2160.23  2091.64  2067.57  112.91   99.94   \n","2017-07-01  103.9  ...  2402.71  2391.79  2347.38  2205.44  107.83  103.92   \n","2017-10-01  104.9  ...  2523.43  2394.47  2363.19  2402.71  123.99  107.50   \n","2018-01-01  108.0  ...  2566.46  2467.49  2476.37  2523.43  114.96  120.68   \n","\n","            X17_L3  X18_L1  X18_L2  X18_L3  \n","datetime                                    \n","2002-01-01   27.88   31.07   32.12   31.86  \n","2002-04-01   26.77   33.12   29.02   31.43  \n","2002-07-01   30.99   32.96   35.15   34.74  \n","2002-10-01   31.80   36.30   35.65   35.73  \n","2003-01-01   35.88   40.06   38.98   38.30  \n","...            ...     ...     ...     ...  \n","2017-01-01   97.77  104.43  102.14   96.21  \n","2017-04-01   94.29  117.92  100.25  103.96  \n","2017-07-01  106.79  111.62  108.67  104.50  \n","2017-10-01  104.59  116.09  112.12  106.74  \n","2018-01-01  102.84  121.24  116.89  105.76  \n","\n","[65 rows x 48 columns]"],"text/html":["\n","  <div id=\"df-e452ff21-4872-4377-9526-cc7de6475ec8\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>X1_L2</th>\n","      <th>X1_L3</th>\n","      <th>X2_L2</th>\n","      <th>X2_L3</th>\n","      <th>X3_L2</th>\n","      <th>X3_L3</th>\n","      <th>X4_L2</th>\n","      <th>X4_L3</th>\n","      <th>X5_L2</th>\n","      <th>X5_L3</th>\n","      <th>...</th>\n","      <th>X16_L0</th>\n","      <th>X16_L1</th>\n","      <th>X16_L2</th>\n","      <th>X16_L3</th>\n","      <th>X17_L1</th>\n","      <th>X17_L2</th>\n","      <th>X17_L3</th>\n","      <th>X18_L1</th>\n","      <th>X18_L2</th>\n","      <th>X18_L3</th>\n","    </tr>\n","    <tr>\n","      <th>datetime</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2002-01-01</th>\n","      <td>97.9</td>\n","      <td>96.7</td>\n","      <td>100.1</td>\n","      <td>99.8</td>\n","      <td>64.4</td>\n","      <td>62.0</td>\n","      <td>74.0</td>\n","      <td>74.9</td>\n","      <td>68.5</td>\n","      <td>65.9</td>\n","      <td>...</td>\n","      <td>748.07</td>\n","      <td>693.70</td>\n","      <td>643.89</td>\n","      <td>537.81</td>\n","      <td>27.06</td>\n","      <td>29.21</td>\n","      <td>27.88</td>\n","      <td>31.07</td>\n","      <td>32.12</td>\n","      <td>31.86</td>\n","    </tr>\n","    <tr>\n","      <th>2002-04-01</th>\n","      <td>102.5</td>\n","      <td>101.2</td>\n","      <td>100.6</td>\n","      <td>100.1</td>\n","      <td>58.1</td>\n","      <td>62.6</td>\n","      <td>76.8</td>\n","      <td>75.8</td>\n","      <td>65.5</td>\n","      <td>67.3</td>\n","      <td>...</td>\n","      <td>842.34</td>\n","      <td>895.58</td>\n","      <td>819.99</td>\n","      <td>748.07</td>\n","      <td>30.73</td>\n","      <td>25.15</td>\n","      <td>26.77</td>\n","      <td>33.12</td>\n","      <td>29.02</td>\n","      <td>31.43</td>\n","    </tr>\n","    <tr>\n","      <th>2002-07-01</th>\n","      <td>104.0</td>\n","      <td>104.3</td>\n","      <td>101.5</td>\n","      <td>101.7</td>\n","      <td>67.5</td>\n","      <td>66.4</td>\n","      <td>78.4</td>\n","      <td>79.6</td>\n","      <td>72.3</td>\n","      <td>71.6</td>\n","      <td>...</td>\n","      <td>717.99</td>\n","      <td>742.72</td>\n","      <td>796.40</td>\n","      <td>842.34</td>\n","      <td>29.65</td>\n","      <td>32.05</td>\n","      <td>30.99</td>\n","      <td>32.96</td>\n","      <td>35.15</td>\n","      <td>34.74</td>\n","    </tr>\n","    <tr>\n","      <th>2002-10-01</th>\n","      <td>101.8</td>\n","      <td>102.3</td>\n","      <td>101.0</td>\n","      <td>101.1</td>\n","      <td>64.4</td>\n","      <td>66.4</td>\n","      <td>79.9</td>\n","      <td>78.4</td>\n","      <td>68.5</td>\n","      <td>69.9</td>\n","      <td>...</td>\n","      <td>658.92</td>\n","      <td>646.42</td>\n","      <td>736.40</td>\n","      <td>717.99</td>\n","      <td>31.89</td>\n","      <td>32.29</td>\n","      <td>31.80</td>\n","      <td>36.30</td>\n","      <td>35.65</td>\n","      <td>35.73</td>\n","    </tr>\n","    <tr>\n","      <th>2003-01-01</th>\n","      <td>100.3</td>\n","      <td>100.4</td>\n","      <td>101.5</td>\n","      <td>101.3</td>\n","      <td>69.0</td>\n","      <td>68.7</td>\n","      <td>77.4</td>\n","      <td>78.0</td>\n","      <td>73.0</td>\n","      <td>73.2</td>\n","      <td>...</td>\n","      <td>591.86</td>\n","      <td>627.55</td>\n","      <td>724.80</td>\n","      <td>658.92</td>\n","      <td>33.45</td>\n","      <td>34.74</td>\n","      <td>35.88</td>\n","      <td>40.06</td>\n","      <td>38.98</td>\n","      <td>38.30</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2017-01-01</th>\n","      <td>99.9</td>\n","      <td>99.8</td>\n","      <td>100.9</td>\n","      <td>100.6</td>\n","      <td>106.3</td>\n","      <td>104.3</td>\n","      <td>74.6</td>\n","      <td>71.2</td>\n","      <td>109.1</td>\n","      <td>108.4</td>\n","      <td>...</td>\n","      <td>2067.57</td>\n","      <td>2026.46</td>\n","      <td>1983.48</td>\n","      <td>2008.19</td>\n","      <td>106.11</td>\n","      <td>102.92</td>\n","      <td>97.77</td>\n","      <td>104.43</td>\n","      <td>102.14</td>\n","      <td>96.21</td>\n","    </tr>\n","    <tr>\n","      <th>2017-04-01</th>\n","      <td>100.5</td>\n","      <td>100.3</td>\n","      <td>101.6</td>\n","      <td>101.6</td>\n","      <td>98.5</td>\n","      <td>99.4</td>\n","      <td>73.2</td>\n","      <td>76.3</td>\n","      <td>95.2</td>\n","      <td>103.3</td>\n","      <td>...</td>\n","      <td>2205.44</td>\n","      <td>2160.23</td>\n","      <td>2091.64</td>\n","      <td>2067.57</td>\n","      <td>112.91</td>\n","      <td>99.94</td>\n","      <td>94.29</td>\n","      <td>117.92</td>\n","      <td>100.25</td>\n","      <td>103.96</td>\n","    </tr>\n","    <tr>\n","      <th>2017-07-01</th>\n","      <td>100.7</td>\n","      <td>100.7</td>\n","      <td>102.1</td>\n","      <td>101.9</td>\n","      <td>105.3</td>\n","      <td>104.3</td>\n","      <td>73.8</td>\n","      <td>73.4</td>\n","      <td>107.6</td>\n","      <td>103.9</td>\n","      <td>...</td>\n","      <td>2402.71</td>\n","      <td>2391.79</td>\n","      <td>2347.38</td>\n","      <td>2205.44</td>\n","      <td>107.83</td>\n","      <td>103.92</td>\n","      <td>106.79</td>\n","      <td>111.62</td>\n","      <td>108.67</td>\n","      <td>104.50</td>\n","    </tr>\n","    <tr>\n","      <th>2017-10-01</th>\n","      <td>101.1</td>\n","      <td>100.9</td>\n","      <td>102.1</td>\n","      <td>102.1</td>\n","      <td>103.4</td>\n","      <td>104.5</td>\n","      <td>73.7</td>\n","      <td>73.2</td>\n","      <td>101.3</td>\n","      <td>104.9</td>\n","      <td>...</td>\n","      <td>2523.43</td>\n","      <td>2394.47</td>\n","      <td>2363.19</td>\n","      <td>2402.71</td>\n","      <td>123.99</td>\n","      <td>107.50</td>\n","      <td>104.59</td>\n","      <td>116.09</td>\n","      <td>112.12</td>\n","      <td>106.74</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-01</th>\n","      <td>100.9</td>\n","      <td>101.0</td>\n","      <td>102.1</td>\n","      <td>102.1</td>\n","      <td>108.4</td>\n","      <td>101.9</td>\n","      <td>73.1</td>\n","      <td>74.2</td>\n","      <td>115.0</td>\n","      <td>108.0</td>\n","      <td>...</td>\n","      <td>2566.46</td>\n","      <td>2467.49</td>\n","      <td>2476.37</td>\n","      <td>2523.43</td>\n","      <td>114.96</td>\n","      <td>120.68</td>\n","      <td>102.84</td>\n","      <td>121.24</td>\n","      <td>116.89</td>\n","      <td>105.76</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>65 rows × 48 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e452ff21-4872-4377-9526-cc7de6475ec8')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-e452ff21-4872-4377-9526-cc7de6475ec8 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-e452ff21-4872-4377-9526-cc7de6475ec8');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":["X_train.shape[1]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9PqzyXYP1eDd","executionInfo":{"status":"ok","timestamp":1653543240110,"user_tz":-540,"elapsed":6,"user":{"displayName":"김다은","userId":"16190703000834159129"}},"outputId":"4ca6a764-6256-46e2-e8db-90834569c842"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["48"]},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":["hist, model = func.Model(input_dim=X_train.shape[1], units = 48, epochs = 150, batch_size = 32, patience = 50, dropout = 0.3, lr= 0.01) # units, epochs, batch_size, patience, dropout, lr"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"JPXdYlGoA5I3","executionInfo":{"status":"error","timestamp":1653543243013,"user_tz":-540,"elapsed":2907,"user":{"displayName":"김다은","userId":"16190703000834159129"}},"outputId":"e689fe45-013d-493e-c5a6-5cbe03b74e83"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Epoch 1: LearningRateScheduler setting learning rate to 0.009999999776482582.\n","Epoch 1/150\n"]},{"output_type":"error","ename":"InvalidArgumentError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mInvalidArgumentError\u001b[0m                      Traceback (most recent call last)","\u001b[0;32m<ipython-input-30-80e8e95542b0>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mhist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mModel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput_dim\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0munits\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m48\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m150\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch_size\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m32\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpatience\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m50\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdropout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0.3\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlr\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0;36m0.01\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# units, epochs, batch_size, patience, dropout, lr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-24-d16b2f01e00d>\u001b[0m in \u001b[0;36mModel\u001b[0;34m(self, input_dim, units, epochs, batch_size, patience, dropout, lr)\u001b[0m\n\u001b[1;32m    144\u001b[0m     \u001b[0mscheduler\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mLearningRateScheduler\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlr_schedule\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    145\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 146\u001b[0;31m     \u001b[0mhist\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalidation_data\u001b[0m \u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mepochs\u001b[0m\u001b[0;34m,\u001b[0m  \u001b[0mbatch_size\u001b[0m \u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbatch_size\u001b[0m \u001b[0;34m,\u001b[0m\u001b[0mcallbacks\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcheckpoint\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mearly_stopping\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscheduler\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    147\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    148\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mhist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     65\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 67\u001b[0;31m       \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     68\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m       \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     53\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     54\u001b[0m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0;32m---> 55\u001b[0;31m                                         inputs, attrs, num_outputs)\n\u001b[0m\u001b[1;32m     56\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     57\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mInvalidArgumentError\u001b[0m: Graph execution error:\n\nDetected at node 'sequential_3/embedding/embedding_lookup' defined at (most recent call last):\n    File \"/usr/lib/python3.7/runpy.py\", line 193, in _run_module_as_main\n      \"__main__\", mod_spec)\n    File \"/usr/lib/python3.7/runpy.py\", line 85, in _run_code\n      exec(code, run_globals)\n    File \"/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py\", line 16, in <module>\n      app.launch_new_instance()\n    File \"/usr/local/lib/python3.7/dist-packages/traitlets/config/application.py\", line 846, in launch_instance\n      app.start()\n    File \"/usr/local/lib/python3.7/dist-packages/ipykernel/kernelapp.py\", line 499, in start\n      self.io_loop.start()\n    File \"/usr/local/lib/python3.7/dist-packages/tornado/platform/asyncio.py\", line 132, in start\n      self.asyncio_loop.run_forever()\n    File \"/usr/lib/python3.7/asyncio/base_events.py\", line 541, in run_forever\n      self._run_once()\n    File \"/usr/lib/python3.7/asyncio/base_events.py\", line 1786, in _run_once\n      handle._run()\n    File \"/usr/lib/python3.7/asyncio/events.py\", line 88, in _run\n      self._context.run(self._callback, *self._args)\n    File \"/usr/local/lib/python3.7/dist-packages/tornado/platform/asyncio.py\", line 122, in _handle_events\n      handler_func(fileobj, events)\n    File \"/usr/local/lib/python3.7/dist-packages/tornado/stack_context.py\", line 300, in null_wrapper\n      return fn(*args, **kwargs)\n    File \"/usr/local/lib/python3.7/dist-packages/zmq/eventloop/zmqstream.py\", line 577, in _handle_events\n      self._handle_recv()\n    File \"/usr/local/lib/python3.7/dist-packages/zmq/eventloop/zmqstream.py\", line 606, in _handle_recv\n      self._run_callback(callback, msg)\n    File \"/usr/local/lib/python3.7/dist-packages/zmq/eventloop/zmqstream.py\", line 556, in _run_callback\n      callback(*args, **kwargs)\n    File \"/usr/local/lib/python3.7/dist-packages/tornado/stack_context.py\", line 300, in null_wrapper\n      return fn(*args, **kwargs)\n    File \"/usr/local/lib/python3.7/dist-packages/ipykernel/kernelbase.py\", line 283, in dispatcher\n      return self.dispatch_shell(stream, msg)\n    File \"/usr/local/lib/python3.7/dist-packages/ipykernel/kernelbase.py\", line 233, in dispatch_shell\n      handler(stream, idents, msg)\n    File \"/usr/local/lib/python3.7/dist-packages/ipykernel/kernelbase.py\", line 399, in execute_request\n      user_expressions, allow_stdin)\n    File \"/usr/local/lib/python3.7/dist-packages/ipykernel/ipkernel.py\", line 208, in do_execute\n      res = shell.run_cell(code, store_history=store_history, silent=silent)\n    File \"/usr/local/lib/python3.7/dist-packages/ipykernel/zmqshell.py\", line 537, in run_cell\n      return super(ZMQInteractiveShell, self).run_cell(*args, **kwargs)\n    File \"/usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py\", line 2718, in run_cell\n      interactivity=interactivity, compiler=compiler, result=result)\n    File \"/usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py\", line 2822, in run_ast_nodes\n      if self.run_code(code, result):\n    File \"/usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py\", line 2882, in run_code\n      exec(code_obj, self.user_global_ns, self.user_ns)\n    File \"<ipython-input-30-80e8e95542b0>\", line 1, in <module>\n      hist, model = func.Model(input_dim=X_train.shape[1], units = 48, epochs = 150, batch_size = 32, patience = 50, dropout = 0.3, lr= 0.01) # units, epochs, batch_size, patience, dropout, lr\n    File \"<ipython-input-24-d16b2f01e00d>\", line 146, in Model\n      hist = model.fit(X_train, y_train, validation_data =(X_test, y_test), epochs=self.epochs,  batch_size =self.batch_size ,callbacks=[checkpoint, early_stopping, scheduler])\n    File \"/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\", line 64, in error_handler\n      return fn(*args, **kwargs)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 1384, in fit\n      tmp_logs = self.train_function(iterator)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 1021, in train_function\n      return step_function(self, iterator)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 1010, in step_function\n      outputs = model.distribute_strategy.run(run_step, args=(data,))\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 1000, in run_step\n      outputs = model.train_step(data)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 859, in train_step\n      y_pred = self(x, training=True)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\", line 64, in error_handler\n      return fn(*args, **kwargs)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/base_layer.py\", line 1096, in __call__\n      outputs = call_fn(inputs, *args, **kwargs)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\", line 92, in error_handler\n      return fn(*args, **kwargs)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/sequential.py\", line 374, in call\n      return super(Sequential, self).call(inputs, training=training, mask=mask)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/functional.py\", line 452, in call\n      inputs, training=training, mask=mask)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/functional.py\", line 589, in _run_internal_graph\n      outputs = node.layer(*args, **kwargs)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\", line 64, in error_handler\n      return fn(*args, **kwargs)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/base_layer.py\", line 1096, in __call__\n      outputs = call_fn(inputs, *args, **kwargs)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\", line 92, in error_handler\n      return fn(*args, **kwargs)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/layers/embeddings.py\", line 197, in call\n      out = tf.nn.embedding_lookup(self.embeddings, inputs)\nNode: 'sequential_3/embedding/embedding_lookup'\nindices[0,0] = 100 is not in [0, 48)\n\t [[{{node sequential_3/embedding/embedding_lookup}}]] [Op:__inference_train_function_8498]"]}]},{"cell_type":"code","source":[""],"metadata":{"id":"2Tb3en9oCyJ_"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## 코로나 포함"],"metadata":{"id":"OQv6G9Qf8Pst"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"3FTHSRAJU-6Y"},"outputs":[],"source":["func = GDP()"]},{"cell_type":"code","source":["data = pd.read_csv(func.data_path)\n","X_train, X_test, y_train, y_test = func.preprocesscing(data = func.data)"],"metadata":{"id":"gpxmo-yH4GAL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["hist, model = func.Model(input_dim=X_train.shape[1], units = 96, epochs = 150, batch_size = 32, patience = 80, dropout = 0.3, lr= 0.01) # units, epochs, batch_size, patience, dropout, lr"],"metadata":{"id":"kpglKdmC48O0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# units_list = [int(96/3), int(96/2), 96, 96 * 2, 96 * 3]\n","\n","# for unt_n in units_list:\n","#   hist, model = func.Model(input_dim=X_train.shape[1], units = unt_n, epochs = 150, batch_size = 64, patience = 100, dropout = 0.3, lr= 0.01) # units, epochs, batch_size, patience, dropout, lr"],"metadata":{"id":"YHdaqIsET1IM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["units_list = [int(96/3), int(96/2), 96, 96 * 2, 96 * 3]\n","epochs_list = [100, 150, 200, 250]\n","batch_size_list = [16, 32, 64]\n","patience_list = [80, 100, 120, 150]\n","dropout_list = [0.1, 0.2, 0.25, 0.3]\n","lr_list = [0.01]\n","\n","# for unt_n in units_list:\n","#   for eph_n in epochs_list:\n","#     for bch_n in batch_size_list:\n","#       for pinc_n in patience_list:\n","#         for dpt_n in dropout_list:\n","#           for lr_n in lr_list:\n","#             hist, model = func.Model(units = unt_n, epochs = eph_n, bch_n = 67, pinc_n = 100, dpt_n = 0.3, lr_n= 0.01) # units, epochs, batch_size, patience, dropout, lr"],"metadata":{"id":"4Ca2-cQITJoM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# np.where(hist.history[\"loss\"].min, )"],"metadata":{"id":"t4UygQK34GCW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"o-1c6S0B4GKM"},"execution_count":null,"outputs":[]}]}